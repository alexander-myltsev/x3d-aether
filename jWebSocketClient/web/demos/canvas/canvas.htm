<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
<!--
//	****************************************************************************
//	jWebSocket Simple Chat (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	****************************************************************************
-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Canvas Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var lJWSID = "jWebSocket Canvas";
			var lWSC = null;
			var eLog = null;

			var IN = 0;
			var OUT = 1;
			var EVT = 2;
			var SYS = "SYS";
			var USR = null;

			// append a line to the log text area
			function log( aUsername, aEvent, aString ) {
				var lFlag;
				switch( aEvent ) {
					case IN: lFlag = "<"; break;
					case OUT: lFlag = ">"; break;
					case EVT: lFlag = "*"; break;
					default: lFlag = "?";
				}
				// set a default user name if not yet logged in
				if( !aUsername ) {
					aUsername = lWSC.getUsername();
				}
				if( !aUsername ) {
					aUsername = "USR";
				}
				eLog.innerHTML +=
					aUsername + " " +
					lFlag + " " +
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function doOpen() {
				// adjust this URL to your jWebSocket server
				var lURL = jws.JWS_SERVER_URL + "/;prot=json,timeout=360000";
				log( SYS, OUT, "Connecting to " + lJWSID + " at " + lURL + "..." );

				// try to establish connection to jWebSocket server
				lWSC.logon( lURL, "guest", "guest", {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( SYS, IN, "Connection to " + lJWSID + " established." );
						// start keep alive if user selected that option
						lWSC.startKeepAlive({ interval: 30000 });
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						// for debug purposes
						/*
						log( SYS, EVT, "<font style='color:#888'>" +
							( aToken ? aToken.type : "-" ) + ": " +
							aEvent.data + "</font>");
						*/
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
						log( SYS, IN, "Disconnected from " + lJWSID + "." );
					}
					
				});
			}

			function doClose() {
				// disconnect automatically logs out!
				lWSC.stopKeepAlive();
				var lRes = lWSC.close({
					// wait a maximum of 3 seconds for server good bye message
					timeout: 3000
				});
				log( SYS, OUT, "logout: " + lRes.msg );
			}

			function broadcast() {
				var lMsg = eMessage.value;
				if( lMsg.length > 0 ) {
					log( USR, OUT, lMsg );
					var lRes = lWSC.broadcastText(
						"",		// broadcast to all clients (not limited to a certain pool)
						lMsg	// broadcast this message
					);
					// log error only, on success don't confuse the user
					if( lRes.code != 0 ) {
						log( SYS, OUT, "broadcast: " + lRes.msg );
					}
					eMessage.value = "";
				}
				doFocus( eMessage );
			}

			function usrKeyDnLsnr( aEvent ) {
				// on enter in username field try to login
				if( aEvent.keyCode == 13 ) {
					doOpen();
				}
			}

			function msgKeyDnLsnr( aEvent ) {
				// on enter in message field send broadcast the message
				if( !aEvent.shiftKey && aEvent.keyCode == 13 ) {
					broadcast();
				}
			}

			function elemFocusLsnr( aEvent ) {
				// on focus select full text of element (for username and message)
				jws.events.getTarget( aEvent ).select();
			}

			function stressTest() {
				eStressBtn.setAttribute("disabled", "disabled");
				var MAX = 10;
				for( var i = 0; i < MAX; i++) {
					var lIframe = document.createElement( "iframe" );
					lIframe.src = "iframe.htm";
					lIframe.id = "iframe" + i;
					lIframe.setAttribute( "frameborder", "0" );
					lIframe.style.width = "320px";
					lIframe.style.height = "200px";
					lIframe.style.border = "1px solid #ccc";
					lIframe.style.margin = "2px";
					document.body.appendChild( lIframe );
				}

			}

			function initPage() {
				eLog = jws.$("sdivChat");
				eStressBtn = jws.$("sbtnStressTest");
				// check if WebSockets are supported by the browser
				if( jws.browserSupportsWebSockets() ) {
					// instaniate new TokenClient, either JSON, CSV or XML
					lWSC = new jws.jWebSocketJSONClient();
					doOpen();
				} else {
					jws.$( "sbtnClearLog" ).setAttribute( "disabled", "disabled" );
					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( SYS, IN, lMsg );
				}
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				if( lWSC ) {
					lWSC.close({
						// force immediate client side disconnect
						timeout: 0
					});
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/canvas/canvas.htm" );
			}
		</script>
-->
		<h1>jWebSocket Canvas Demo</h1>
		<p>This demo shows how to commonly work together on a shared canvas. Updates applied to a certain canvas
			are automatically distributed to all other clients connected to the jWebSocket network. Simply take the mouse
			and draw something. Please consider that not all browsers do support the HTML5 Canvas element yet.</p>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="" align="right">
						<input style="display:none" class="sbtnDlg" id="sbtnClearLog" type="button" value="Clear Log" onclick="clearLog();">
					</td>
					<td class="stdDlg" width="" align="right">
						<input class="sbtnDlg" id="sbtnStressTest" type="button" value="Stress Test" onclick="stressTest();">
					</td>
				</tr>
			</table>
		</div>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:50px; overflow:auto; display:none">
		</div>
		<table width="100%">
			<tr>
				<td><iframe style="width:100%; height:200px; border:1px solid #ccc" frameborder="0" src="iframe.htm"></iframe></td>
				<td><iframe style="width:100%; height:200px; border:1px solid #ccc" frameborder="0" src="iframe.htm"></iframe></td>
			</tr>
		</table>
	</body>
</html>
