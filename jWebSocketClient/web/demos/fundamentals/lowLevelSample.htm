<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Base Demo (uses jWebSocket Client and Server)
		//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Low Level Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var lWebSocketClient = null;

			function initPage() {
				if( jws.browserSupportsWebSockets() ) {
					// create low level jWebSocket client
					lWebSocketClient = new jws.jWebSocketBaseClient();
					// create low level jWebSocket client, using custom
					// low level sub protocol (ie. no JSON, CSV or XML token)
					var lURL = jws.JWS_SERVER_URL + "/;prot=custom";
					console.log( "Connecting to " + lURL + " ..." );
					try {
						lWebSocketClient.open( lURL, {
							// OnOpen callback
							OnOpen: function( aEvent ) {
								console.log( "jWebSocket connection established." );
								// once successfully connected send something to the server.
								lWebSocketClient.sendStream( "Hello jWebSocket Server..." + "\n" );
							},
							// OnMessage callback
							OnMessage: function( aEvent ) {
								console.log( "jWebSocket message received: '" + aEvent.data + "'" );
							},
							// OnClose callback
							OnClose: function( aEvent ) {
								console.log( "jWebSocket connection closed." );
							}
						});
					} catch( ex ) {
						console.log( "Exception: " + ex.message );
					}
				} else {
					console.log( jws.MSG_WS_NOT_SUPPORTED );
				}
			}

			function exitPage() {
				if( lWebSocketClient ) {
					console.log( "Disconnecting..." );
					try {
						lWebSocketClient.close();
						console.log( "Disconnected." );
					} catch( ex ) {
						console.log( "Exception: " + ex.message );
					}
				} else {
					console.log( "Not connected." );
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<h1>jWebSocket Base Demo</h1>
		<p>Low Level Demo, please open the log window to see the output...</p>
	</body>
</html>
