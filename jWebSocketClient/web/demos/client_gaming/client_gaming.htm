<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
<!--
//	****************************************************************************
//	jWebSocket Client Gmaing Demo (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	****************************************************************************
-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Client Gaming</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>

		<!-- import the client gaming plug-in -->
		<script src="js/jwsClientGamingPlugIn.js" type="text/javascript"></script>

		<script type="text/javascript" language="JavaScript">

			var lJWSID = "jWebSocket Client Gaming",
			lWSC = null,
			eLog = null,
			eUsername = null,
			ePool = null,
			eMessage = null,
			eDebug = null,
			eKeepAlive = null;

			var IN = 0;
			var OUT = 1;
			var EVT = 2;
			var SYS = "SYS";
			var USR = null;

			// append a line to the log text area
			function log( aUsername, aEvent, aString ) {
				var lFlag;
				switch( aEvent ) {
					case IN: lFlag = "<"; break;
					case OUT: lFlag = ">"; break;
					case EVT: lFlag = "*"; break;
					default: lFlag = "?";
				}
				// set a default user name if not yet logged in
				if( !aUsername ) {
					aUsername = lWSC.getUsername();
				}
				if( !aUsername ) {
					aUsername = "USR";
				}
				eLog.innerHTML +=
					aUsername + " " +
					lFlag + " " +
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function doFocus( aElement ) {
				aElement.focus();
				aElement.select();
			}

			function connect() {

				function login() {
					// auto login after connection is established
					var lUsername = eUsername.value;
					// log( SYS, OUT, "logging in user '" + lUsername + "'..." );
					var lRes = lWSC.login( lUsername, "", "" );
					// log( SYS, IN, "login: " + lWSC.resultToString( lRes ) );
				}

				// if already connected use existing connection to re-login...
				if( lWSC.isConnected() ) {
					login();
					return;
				}

				// adjust this URL to your jWebSocket server
				var lURL = jws.JWS_SERVER_URL + "/;prot=json,timeout=120000";
				log( SYS, OUT, "Connecting to " + lJWSID + " at " + lURL + "..." );

				// try to establish connection to jWebSocket server
				lWSC.open( lURL, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( SYS, IN, "Connection to " + lJWSID + " established." );
						login();
						// start keep alive if user selected that option
						checkKeepAlive({ immediate: false });
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						// for debug purposes
						if( eDebug.checked ) {
							log( SYS, EVT, "<font style='color:#888'>" + aEvent.data + "</font>");
						}
						if( aToken ) {
							// is it a response from a previous request of this client?
							if( aToken.type == "response" ) {
								// figure out of which request
								if( aToken.reqType == "login" ) {
									if( aToken.code == 0 ) {
										log( SYS, IN, "Welcome '" + aToken.username + "'" );
										// call getAuthClients method from
										// jWebSocket System Client Plug-In
										lWSC.getAuthClients({
											pool: null
										});
									} else {
										log( SYS, IN, "Error logging in '" + + "': " + aToken.msg );
										// select username again for convenience
										doFocus( eUsername );
									}
								} else if( aToken.reqType == "getClients" ) {
									log( SYS, IN, "Clients (" + aToken.count + "): " + aToken.clients );
								}
								// is it an event w/o a previous request ?
							} else if( aToken.type == "event" ) {
								// interpret the event name
								// :
							} else if( aToken.type == "goodBye" ) {
								log( SYS, IN, lJWSID + " says good bye (reason: " + aToken.reason + ")!" );
								doFocus( eUsername );
								
							} else if( aToken.type == "broadcast" ) {
								// is it any token from another client
							}
						}
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
						log( SYS, IN, "Disconnected from " + lJWSID + "." );
						doFocus( eUsername );
					}

				});
			}

			function disconnect() {
				// disconnect automatically logs out!
				lWSC.stopKeepAlive();
				var lRes = lWSC.close({
					// wait a maximum of 3 seconds for server good bye message
					timeout: 3000
				});
				log( SYS, OUT, "logout: " + lRes.msg );
			}

			function checkKeepAlive( aOptions ) {
				if( !aOptions ) {
					aOptions = {};
				}
				aOptions.interval = 30000;
				if( eKeepAlive.checked ) {
					lWSC.startKeepAlive( aOptions );
				} else {
					lWSC.stopKeepAlive();
				}
			}

			function usrKeyDnLsnr( aEvent ) {
				// on enter in username field try to login
				if( aEvent.keyCode == 13 ) {
					connect();
				}
			}

			// this is the location of this player
			var player = {
				loc_x: 100,
				loc_y: 100,
				speed: 10
			};

			function processKeyDown( aEvent ) {
				// here the "gaming" event is broadcasted to all other clients
				// console.log( "keydown: " + aEvent.keyCode );
				switch( aEvent.keyCode ) {
					case 38: // up
						player.loc_y -= player.speed;
						break;
					case 40: // down
						player.loc_y += player.speed;
						break;
					case 37: // left
						player.loc_x -= player.speed;
						break;
					case 39: // right
						player.loc_x += player.speed;
						break;
				}

				// broadcast the token
				lWSC.broadcastGamingEvent({
					keycode: aEvent.keyCode,
					x: player.loc_x,
					y: player.loc_y
				});
			}

			function initPage() {
				// get some required HTML elements
				eLog = jws.$( "sdivChat" );
				eUsername = jws.$( "stxfUsername" );
				eDebug = jws.$( "schkDebug" );
				eKeepAlive = jws.$( "schkKeepAlive" );

				// check if WebSockets are supported by the browser
				if( jws.browserSupportsWebSockets() ) {
					// instaniate new TokenClient, either JSON, CSV or XML
					lWSC = new jws.jWebSocketJSONClient();
					
					jws.events.addEventListener( eUsername, "keydown", usrKeyDnLsnr, false );
					eUsername.focus();
					eUsername.select();

					// attach event listener for key down event in the docuemnt
					jws.events.addEventListener( document, "keydown", processKeyDown, false );
				} else {
					jws.$( "sbtnLogin" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogout" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClearLog" ).setAttribute( "disabled", "disabled" );

					eDebug.setAttribute( "disabled", "disabled" );
					eKeepAlive.setAttribute( "disabled", "disabled" );
					eUsername.setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( SYS, IN, lMsg );
				}
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				if( lWSC ) {
					lWSC.disconnect({
						// force immediate client side disconnect
						timeout: 0
					});
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/client_gaming/client_gaming.htm" );
			}
		</script>
-->		
		<h1>jWebSocket Client Gaming</h1>
		<p>This demo shows how to implement a pure client based game without any 
		server side plug-in. Events like key strokes or mouse clicks on a client 
		are distributed to all other clients, e.g. to synchronize the location 
		of a certain player on a common playgroud. This demo uses the standard 
		broadcast and event mechanism only which is already provided by 
		jWebSocket's SystemPlugIn. If you are not sure whether your favorite 
		browser supports WebSockets please refer to our
		<a href="http://jwebsocket.org/jws_for_all.htm">jWebSocket Cross-Browser Compatibility</a>
		page.</p>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Username</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfUsername" type="text" value="anonymous" size="20"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="connect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="disconnect();"></td>
					<td class="stdDlg" width="" align="right">
						<input id="schkKeepAlive" type="checkbox" value="off" onclick="checkKeepAlive();">&nbsp;Keep-Alive&nbsp;
						<input id="schkDebug" type="checkbox" value="off" >&nbsp;Debug&nbsp;
						<input class="sbtnDlg" id="sbtnClearLog" type="button" value="Clear Log" onclick="clearLog();">
					</td>
				</tr>
			</table>
		</div>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<p>Please login to start as a green player, if other players are online they are shown in red.<br/>
		Use the arrow keys to move your player and broadcast your move to other users.</p>
	</body>
</html>
