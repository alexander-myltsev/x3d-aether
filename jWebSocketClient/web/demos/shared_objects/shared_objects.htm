<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Hello World (uses jWebSocket Client and Server)
		//	(C) 2010 Alexander Schulze, jWebSocket.org, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Shared Objects</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script type="text/javascript" src="../../res/js/jWebSocket.js"></script>

		<!-- load additional plug-in here -->
		<script type="text/javascript" src="../../res/js/jwsSharedObjectsPlugIn.js"></script>

		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var jWebSocketClient = null;
			var gUsername = null;

			function logon() {
				// URL is ws://[yourhostname|localhost]:8787
				var lURL = jws.JWS_SERVER_URL;
				gUsername = eUsername.value;
				var lPassword = ePassword.value;
				ePassword.value = "";

				log( "Connecting to " + lURL + " and logging in as '" + gUsername + "'..." );
				var lRes = jWebSocketClient.logon( lURL, gUsername, lPassword, {
					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection established.</font>" );
						jWebSocketClient.initSharedObjects();
					},
					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						log( "<font style='color:#888'>jWebSocket '" + aToken.type + "' token received, full message: '" + aEvent.data + "'</font>" );
					},
					// OnClose callback
					OnClose: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
					}
				});

				log( jWebSocketClient.resultToString( lRes ) );
			}

			function logoff() {
				if( jWebSocketClient ) {
					log( "Logging off " + ( gUsername != null ? "'" + gUsername + "'" : "" ) + " and disconnecting..." );
					var lRes = jWebSocketClient.close({timeout: 3000});
					log( jWebSocketClient.resultToString( lRes ) );
				}
			}

			function broadcast() {
			}

			function create() {
				var lRes = jWebSocketClient.createSharedObject(
					eId.value,		// object-id
					"string",		//
					eValue.value,	//
					{
					}
				);
				log( jWebSocketClient.resultToString( lRes ) );
			}

			function destroy() {
				var lRes = jWebSocketClient.destroySharedObject(
					eId.value,	// object-id
					{
					}
				);
				log( jWebSocketClient.resultToString( lRes ) );
			}

			function init() {
				var lRes = jWebSocketClient.initSharedObjects();
				log( jWebSocketClient.resultToString( lRes ) );
			}

			function get() {
				var lRes = jWebSocketClient.getSharedObject(
					eId.value,		// object-id
					null,			// data-type
					{	OnResponse: function( aToken ) {
							log( "getSharedObject (" + aToken.id + "=" + aToken.result + ")" );
							eValue.value = aToken.result;
						}
					}
				);
				log( jWebSocketClient.resultToString( lRes ) );
			}

			function update() {
				var lRes = jWebSocketClient.updateSharedObject(
					eId.value,		// object-id
					"string",		// data-type
					eValue.value,	// new value
					{
					}
				);
				log( jWebSocketClient.resultToString( lRes ) );
			}

			function objectSelected() {
				if( eObjects.selectedIndex >= 0 ) {
					eId.value = eObjects.value;
					var lValue = eObjects.options[ eObjects.selectedIndex ].text;
					var lCutPos = lValue.indexOf(" = ");
					if( lCutPos > 0 ) {
						lValue = lValue.substr( lCutPos + 3 );
					}
					eValue.value = lValue;
				}
			}

			function findOption( aId ) {
				for( var lIdx = 0, lCnt = eObjects.options.length; lIdx < lCnt; lIdx++ ) {
					var lOption = eObjects.options[ lIdx ];
					if( lOption.value == aId ) {
						return lOption;
					}
				}
				return null;
			}

			function sharedObjectCreated( aToken ) {
				log( "sharedObjectCreated (" + aToken.id + ")" );
				var lNewOption = document.createElement( "option" );
				lNewOption.text = aToken.id + " = " + aToken.value;
				lNewOption.value = aToken.id;
				var lOldOption = findOption( aToken.id );
				if( lOldOption ) {
					log( "ERROR on object created: object with id " + aToken.id + " already exists on client, updating..." );
					eObjects.replaceChild( lNewOption, lOldOption );
				} else {
					eObjects.appendChild( lNewOption );
				}
			}

			function sharedObjectDestroyed( aToken ) {
				log( "sharedObjectDestroyed (" + aToken.id + ")" );
				var lOption = findOption( aToken.id );
				if( lOption ) {
					eObjects.removeChild( lOption );
				} else {
					log( "ERROR on objectDestroyed, object with id " + aToken.id + " does not exist on client." );
				}
			}

			function sharedObjectUpdated( aToken ) {
				log( "sharedObjectUpdated (" + aToken.id + ")" );
				var lOldOption = findOption( aToken.id );
				if( lOldOption ) {
					var lNewOption = document.createElement( "option" );
					lNewOption.text = aToken.id + " = " + aToken.value;
					lNewOption.value = aToken.id;
					var lSelIdx = eObjects.selectedIndex;
					eObjects.replaceChild( lNewOption, lOldOption );
					eObjects.selectedIndex = lSelIdx;
				} else {
					log( "ERROR on objectUpdated, object with id " + aToken.id + " does not exist on client, appending..." );
					eObjects.appendChild( lNewOption );
				}
			}

			function sharedObjectsInit( aToken, aObjects ) {
				log( "sharedObjectsInit" );
				eObjects.options.length = 0;
				for( var lField in aObjects ) {
					var lNewOption = document.createElement( "option" );
					lNewOption.text = lField + " = " + aObjects[ lField ];
					lNewOption.value = lField;
					eObjects.appendChild( lNewOption );
				}
			}

			function initPage() {
				eLog = jws.$( "sdivLog" );
				eValue = jws.$( "stxfValue" );
				eUsername = jws.$( "stxfUsername" );
				ePassword = jws.$( "spwfPassword" );
				eId = jws.$( "stxfId" );
				eDatatype = jws.$( "sselDatatype" );
				eObjects = jws.$( "sselObjs" );
				eObjects.options.length = 0;

				// jws.browserSupportsWebSockets checks web if sockets are available
				// either natively, by the Flash Bridge or by the Chrome Frame.
				if( jws.browserSupportsWebSockets() ) {
					jWebSocketClient = new jws.jWebSocketJSONClient();

					// set callbacks for shared objects plug-in
					jWebSocketClient.setSharedObjectsCallbacks({
						OnSharedObjectCreated	: sharedObjectCreated,
						OnSharedObjectDestroyed	: sharedObjectDestroyed,
						OnSharedObjectUpdated	: sharedObjectUpdated,
						OnSharedObjectsInit		: sharedObjectsInit
					});

					eUsername.focus();
				} else {
					jws.$( "sbtnLogon" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogoff" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnBroadcast" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfValue" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfUsername" ).setAttribute( "disabled", "disabled" );
					jws.$( "spwfPassword" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfId" ).setAttribute( "disabled", "disabled" );
					jws.$( "sselDatatype" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				logoff();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/shared_objects/shared_objects.htm" );
			}
		</script>
-->		
		<h1>jWebSocket Shared Objects</h1>
		<p>This demo shows how to share objects on the server. Currently all clients
			can access a shared object and automatically get notified when another
			client changes its value.
		</p>

		<div style="position:relative; height: 320px; overflow: hidden">

			<div id="sdivLog" class="sdivContainer" style="position: absolute; width:76%; height:300px; word-wrap: break-word; overflow:auto;">
			</div>

			<div id="sdivLog" class="sdivContainer" style="position: absolute; left:80%; width:20%; height:300px; overflow: hidden;">
				<span>Objects</span>
				<select class="sselDlg" id="sselObjs" size="20" 
						style="width:95%; height:270px" onchange="objectSelected();">
					<option value="0"></option>
				</select>
			</div>

		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Username</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfUsername" type="text" value="YourUsername" style="width:150px"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogon" type="button" value="Login" onclick="logon();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"></td>
					<td class="stdDlg" width="5">Object&nbsp;Id</td>
					<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfId" type="text" value="Id" style="width:100px"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnCreate" type="button" value="Create" onclick="create();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnInit" type="button" value="Init" onclick="init();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGet" type="button" value="Get" onclick="get();"></td>
					<td class="stdDlg" width="">&nbsp;</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Password</td>
					<td class="stdDlg" width="5"><input class="spwfDlg" id="spwfPassword" type="password" value="" style="width:150px"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogoff" type="button" value="Logoff" onclick="logoff();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" disabled="disabled" id="sbtnBroadcast" type="button" value="-" onclick="broadcast();"></td>
					<td class="stdDlg" width="5">Datatype</td>
					<td class="stdDlg" width="5">
						<select class="sselDlg" id="sselDatatype" style="width:100px">
							<option>number</option>
							<option>string</option>
						</select>
					</td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnDestroy" type="button" value="Destroy" onclick="destroy();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" disabled="disabled" id="sbtnNA" type="button" value="-" onclick=""></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnUpdate" type="button" value="Update" onclick="update();"></td>
					<td class="stdDlg" width="">&nbsp;</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Value</td>
					<td class="stdDlg" width="" colspan="9"><input class="stxfDlg" id="stxfValue" type="text" value="YourValue" style="width:99%"></td>
				</tr>
			</table>
		</div>

	</body>
</html>
