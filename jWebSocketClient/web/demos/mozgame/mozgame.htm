<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
<!--
//	****************************************************************************
//	jWebSocket Stream Demo (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	****************************************************************************
-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket MozGame</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null,
				eKeepAlive = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}


			var lWSC = null;

			function connect() {
				var lURL = jws.JWS_SERVER_URL;

				log( "Connecting to " + lURL + " ..." );
				try {
					lWSC.open( lURL, {

						// OnOpen callback
						OnOpen: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket connection established.</font>" );
						},

						// OnMessage callback
						OnMessage: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket message received: '" + aEvent.data + "'</font>" );
						},

						// OnClose callback
						OnClose: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
						}

					});
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}

			function disconnect() {
				if( lWSC ) {
					lWSC.stopKeepAlive();
					log( "Disconnecting..." );
					var lRes = lWSC.close();
					log( lWSC.resultToString( lRes ) );
				}
			}

			function registerStream() {
				var lStream = eStream.value; // "timeStream";
				log( "Registering at stream '" + lStream + "'..." );
				var lRes = lWSC.registerStream( lStream );
				log( lWSC.resultToString( lRes ) );
			}

			function unregisterStream() {
				var lStream = eStream.value; // "timeStream";
				log( "Unregistering from stream '" + lStream + "'..." );
				var lRes = lWSC.unregisterStream( lStream );
				log( lWSC.resultToString( lRes ) );
			}

			function toggleKeepAlive() {
				if( eKeepAlive.checked ) {
					lWSC.startKeepAlive({ interval: 30000 });
				} else {
					lWSC.stopKeepAlive();
				}
			}

			function initPage() {
				eLog = jws.$( "sdivChat" );
				eMessage = jws.$( "stxfMsg" );
				eKeepAlive =  jws.$( "schkKeepAlive" );
				eStream = jws.$( "sselStream" );

				if( window.WebSocket ) {
					lWSC = new jws.jWebSocketJSONClient();
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnReg" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnUnreg" ).setAttribute( "disabled", "disabled" );
					jws.$( "schkKeepAlive" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				lWSC.stopKeepAlive();
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/streaming/streaming.htm" );
			}
		</script>
-->		
		<h1>jWebSocket MozGame</h1>
		<p>This demo shows how to easily register at a jWebSocket data feed.
		This example is based on the <code>org.jWebSocket.streaming.TimeStream</code> class which simply 
		sends a timestamp token every second to the client. If you are not sure 
		whether your favorite browser supports WebSockets please refer to our
		<a target="_top" href="http://jwebsocket.org/jws_for_all.htm">jWebSocket Cross-Browser Compatibility</a>
		page.</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"></td>
					<td class="stdDlg" align="right" width="">
						<input id="schkKeepAlive" type="checkbox" value="off" onclick="toggleKeepAlive();">&nbsp;Keep-Alive&nbsp;
						<select id="sselStream">
							<option selected="selected" value="stressStream">Stress Stream</option>
							<option value="monitorStream">Monitor Stream</option>
							<option value="timeStream">Time Stream</option>							
						</select>
						<input class="sbtnDlg" id="sbtnReg" type="button" value="Register" onclick="registerStream();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnUnreg" type="button" value="Unregister" onclick="unregisterStream();"></td>
				</tr>
			</table>
		</div>

	</body>
</html>
