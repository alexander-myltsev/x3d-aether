<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
<!--
//	****************************************************************************
//	jWebSocket RPC Demo (uses jWebSocket Client and Server)
//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
//	****************************************************************************
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	****************************************************************************
-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket RPC Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}


			var lWSC = null;

			function connect() {
				var lURL = jws.JWS_SERVER_URL; // + "/;prot=json";

				log( "Connecting to " + lURL + " ..." );
				var lRes = lWSC.open( lURL, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection established.</font>" );
					},

					// OnMessage callback
					OnMessage: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket message received: '" + aEvent.data + "'</font>" );
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
					}

				});

				log( lWSC.resultToString( lRes ) );
			}

			function disconnect() {
				if( lWSC ) {
					log( "Disconnecting..." );
					var lRes = lWSC.close();
					log( lWSC.resultToString( lRes ) );
				}
			}

			function rpc( aMethod ) {

				var lArgs = eArgs.value;

				// test server behaviour with \n and \r in JSON object
				// lArgs = "\n" + lArgs + "\r";

				log( "Remote calling '" + aMethod + "' with args '" + lArgs + "'..." );
				
				// perform the Remote Procedure Call...
				var lRes = lWSC.rpc(
					// pass class, method and argument for server java method:
					"org.jwebsocket.rpc.sample.SampleRPCLibrary",
					aMethod,
					lArgs, 
					{	spawnThread: eSpawnThread.checked,
						// new easy-to-use response callback
						OnResponse: function( aToken ) {
							if( aToken.code != 0 ) {
								log( "RPC Error: " + aToken.msg );
							} else {
								var lRes = aToken.result;
								if( typeof lRes == "object") {
									lRes = JSON.stringify( lRes );
								}
								log( "Received RPC result: " + lRes );
							}
						}
					}
				);

				log( lWSC.resultToString( lRes ) );
			}

			function rpcTest() {

				var lArgs = {
					arg1: "1",
					arg2: 2,
					arg3: true,
					arg4: [ "2", 3, false ],
					arg5: { f1: "3", f2: 4, f3: new Date() }
				};
				var aMethod = "";

				log( "Remote calling '" + aMethod + "' with args '" + lArgs + "'..." );

				// perform the Remote Procedure Call...
				var lRes = lWSC.rpc(
					// pass class, method and argument for server java method:
					"org.jwebsocket.rpc.sample.SampleRPCLibrary", 
					"sampleTokenRPC",
					lArgs,
					// pass option to spawn thread and response call back
					{	spawnThread: eSpawnThread.checked,
						// new easy-to-use response callback
						OnResponse: function( aToken ) {
							if( aToken.code != 0 ) {
								log( "RPC Error: " + aToken.msg );
							} else {
								var lRes = aToken.result;
								// if an object is returned convert it into a human readable format
								if( typeof lRes == "object") {
									lRes = JSON.stringify( lRes );
								}
								log( "Received RPC result: " + lRes );
							}
						}
					}
				);

				log( lWSC.resultToString( lRes ) );
			}

			function rpcGrantedDemo() {
				// getMD5 should properly return a MD5 result because the
				// server grants access to the getMD5 method
				// for details please refer to Java Class
				// org.jWebSocket.plugins.RPCPlugIn
				rpc("getMD5");
			}

			function rpcProtectedDemo() {
				// getProtected should cause an error because the server
				// does not grant access to the getProtected method
				// for details please refer to Java Class
				// org.jWebSocket.plugins.RPCPlugIn
				rpc("getProtected");
			}

			function rrpcDemo() {
				var lArgs = eArgs.value;
				var lMethod = "demo";
				log( "Reverse remote calling '" + lMethod + "' with args '" + lArgs + "'..." );

				// send a reverse remote procedure call to another client
				var lRes = lWSC.rrpc(
					eTarget.value,			// target
					"jws.RRPCServer",		// classname
					lMethod,				// method
					"'" + lArgs + "'",		// arguments as a string
					{						// options
						spawnThread: eSpawnThread.checked,
						// new easy-to-use response callback
						OnResponse: function( aToken ) {
							if( aToken.error ) {
								log( "RRPC Error: " + aToken.error );
							} else {
								log( "Received RRPC result: " + aToken.result );
							}
						}
				});

				log( lWSC.resultToString( lRes ) );
			}

			function initPage() {
				eLog = jws.$( "sdivChat" );
				eArgs = jws.$( "stxfMsg" );
				eTarget = jws.$( "stxfTarget" );
				eSpawnThread = jws.$( "schkThreaded" );

				if( jws.browserSupportsWebSockets() ) {
					lWSC = new jws.jWebSocketJSONClient();
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfMsg" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfTarget" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnGranted" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnProtected" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnRRPC" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/rpc_rrpc/rpc_rrpc.htm" );
			}
		</script>
-->		
		<h1>jWebSocket Remote Procedure Calls (RPC) Demo</h1>
		<p>This demo shows how to call a Java method on a jWebSocket server from
		a browser client and return the result. This example is based on
		the class <code>org.jWebSocket.plugins.RPCPlugIn</code>. The <code>getMD5</code> 
		method simply returns the 32 digit MD5 sum of the passed string 
		argument. If you are not sure whether your favorite browser supports 
		WebSockets please refer to our <a target="_top" href="http://jwebsocket.org/jws_for_all.htm">
		jWebSocket Cross-Browser Compatibility</a> page.</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"></td>
					<td class="stdDlg" width="5">Arguments</td>
					<td class="stdDlg" width="" colspan="2"><input class="stxfDlg" id="stxfMsg" type="text" value="My Remote Procedure Arguments" style="width:100%"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGranted" type="button" value="Call granted" onclick="rpcGrantedDemo();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnProtected" type="button" value="Call protect." onclick="rpcProtectedDemo();"></td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5"></td>
					<td class="stdDlg" width="5">Target&nbsp;Id</td>
					<td class="stdDlg" width=""><input class="stxfDlg" id="stxfTarget" type="text" value="ID" style="width:100%"></td>
					<td class="stdDlg" width=""><input class="schkThreaded" id="schkThreaded" type="checkbox" value="on" checked="checked" title="run remote procedure in separate thread on server"> spawn thread</td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnRRPC" type="button" value="Call reverse" onclick="rrpcDemo();"></td>
					<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnRPCTest" type="button" value="RPC Lib" onclick="rpcTest();"></td>
				</tr>
			</table>
		</div>

	</body>
</html>
